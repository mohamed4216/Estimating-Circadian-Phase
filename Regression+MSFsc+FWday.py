import matplotlib.pyplot as plt
import numpy as np
from sklearn import linear_model
from sklearn.svm import SVR
import pandas as pd
from sklearn.cross_validation import train_test_split
from sklearn.cross_validation import ShuffleSplit
from sklearn.cross_validation import cross_val_score


#features (reaction time, FWday, MSFsc)

x_positive_std=[[59.94005187375116,1,4.836],[89.37063178677337,1,4.836], [65.14588799166182,1,4.836], [70.28568796171628,1,4.836],[ 79.10286618744689,1,4.836],[129.59342708013912,1,3.335], [211.52142114913923,1,3.335], [121.46420582880066,1,3.335], [128.2542316535773,1,3.335],[ 93.4380053027291,1,3.335],[68.80804926528751,1,6.64],[104.87259871922338,1,6.64], [58.941566506339996,1,6.64],[51.505947604242294,1,6.64],[99.27666945589066,1,6.812], [144.48294787887113,1,6.812], [176.9527417366297,1,6.812], [222.23193523274233,1,6.812], [334.48041707166425,1,6.812],[761.0325866155475,1,3.562], [645.7754691063918,1,3.562], [929.0248656382593,1,3.562],[ 2411.9747735484216,1,3.562],[134.28349895468773,1,3.803], [116.48014785529688,1,3.803], [98.95901685909556,1,3.803], [128.2269881794274,1,3.803], [72.56552617277993,1,3.803],[90.31651637318411,0,4.836],[61.67265531823114,0,4.836], [69.84650443091064,0,4.836], [279.08396509602574,0,3.355],[ 307.29376902853386,0,3.355], [62.8701315331063,0,6.64],[58.23208266526869,0,6.64] ,[109.95905874747018,0,6.64],[ 79.83399868767428,0,6.64],[370.30257512679106,0,6.812],[287.9721778570193,0,6.812], [106.10044033264896,0,4.421], [102.39663413928513,0,4.421], [148.48986133877816,0,4.421], [222.0233481840947,0,4.421], [228.1004374850501,0,4.421], [164.40327361144168,0,4.421], [264.03089184148814,0,4.421], [416.36615923741647,0,4.421],[658.8028541535055,0,3.562], [1906.3582565770146,0,3.562], [121.21552122000091,0,3.803],[190.1972670232341,0,3.803], [256.2588985072848,0,3.803]]



x_q90_mean=[[472.30499999999995,1,4.836], [543.5250000000001,1, 4.836], [471.3888888888889,1, 4.836], [478.0071428571428,1, 4.836], [525.1583333333333,1, 4.836],[703.3333333333334,1 ,3.335], [974.5041666666666,1,3.335], [673.4849999999999,1,3.335], [716.7045454545454,1,3.335], [653.1333333333333,1,3.335],[483.7666666666667,1,6.64], [611.12,1,6.64], [440.43333333333334,1,6.64], [436.92333333333335,1,6.64], [590.0142857142857,1,6.812], [676.2416666666667,1,6.812], [822.2833333333333,1,6.812], [916.8833333333333,1,6.812], [1238.9166666666667,1,6.812],[2366.8300000000004,1,3.562], [2315.6388888888887,1,3.562], [3014.785714285714,1,3.562], [6984.0,1,3.562],[670.0,1,3.803], [589.2125,1,3.803], [586.8,1,3.803], [704.5833333333334,1,3.803], [538.5625,1,3.803],[543.3625,0,4.836], [474.7,0,4.836], [494.70714285714286,0,4.836], [1132.639393939394,0,3.335], [1217.259090909091,0,3.335], [474.4125,0,6.64], [446.32,0,6.64], [534.9,0,6.64], [528.4166666666666,0,6.64], [1323.65,0,6.812], [1018.6666666666666,0,6.812], [569.8111111111111,0,4.421], [613.18125,0,4.421], [737.2357142857143,0,4.421], [914.6071428571429,0,4.421], [989.0500000000001,0,4.421], [816.9416666666666,0,4.421], [1090.4833333333333,0,4.421], [1091.286111111111,0,4.421], [2610.7,0,3.562], [5270.75,0,3.562], [654.53,0,3.803], [817.0625,0,3.803], [1031.2375,0,3.803]]

x_q95_mean=[[504.9,1,4.836], [640.4166666666667,1,4.836], [509.98148148148147,1,4.836], [546.0,1,4.836], [594.1944444444445,1,4.836],[834.9871794871796,1,3.335], [1193.5416666666667,1,3.335], [849.9833333333333,1,3.335], [841.8181818181819,1,3.335], [728.2407407407409,1,3.335],[534.6944444444445,1,6.64], [702.5666666666667,1,6.64], [497.9166666666667,1,6.64], [470.8666666666666,1,6.64],[691.8333333333334,1,6.812], [835.75,1,6.812], [962.0,1,6.812], [1108.2777777777778,1,6.812], [1580.777777777778,1,6.812], [3343.8,1,3.562],[3051.222222222222,1,3.562], [3920.8809523809527,1,3.562], [9927.833333333334,1,3.562],[753.5,1,3.803], [705.0,1,3.803], [704.6,1,3.803], [807.8333333333334,1,3.803], [597.625,1,3.803],[633.75,0,4.836], [502.7777777777778,0,4.836], [544.2142857142857,0,4.836], [1410.090909090909,0,3.335], [1504.469696969697,0,3.335], [526.6666666666667,0,6.64],[ 494.9666666666667,0,6.64], [676.1666666666666,0,6.64], [583.1666666666666,0,6.64],[1788.9666666666667,0,6.812], [1402.388888888889,0,6.812],[660.2592592592594,0,4.421], [701.0,0,4.421], [891.3095238095239,0,4.421], [1114.357142857143,0,4.421], [1239.611111111111,0,4.421], [979.375,0,4.421], [1347.388888888889,0,4.421], [1467.4166666666667,0,4.421],[3052.6,0,3.562], [8249.0,0,3.562], [778.9333333333333,0,3.803], [1064.0,0,3.803], [1312.4375,0,3.803]]




X=pd.DataFrame(data=x_q95_mean)

# Mid-sleep point MS, MSW then MSF
y=[3.75,3.375,	3.125,	5,1.125,3,3.875,4, 3.25,	3.25,	4.5,	6.125,	4.875,		5.625,	3.75,3.75,	2.75,	4,	4,
3.75,			4,	3.875,3.125,	3.875,	3.125,	3.5,	3.375,	3.375,4.5,	6.625,	4.75,	3.25,	3.75,	6.5,	7.5,	8.125,	8.375,	7.25,	6.375,	3.75,	4.75,	3.625,	3.5,	6,	6.25,	5,	2.5,	4.125,	4.75,	4.625,	4.125,	3.5]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)

# Create regression object

regr = linear_model.LinearRegression()
#regr = SVR(kernel='rbf', C=1e3, gamma=0.1)

# Train the model using the training sets
regr.fit(X_train, y_train)

# The coefficients for linear model
#print('Coefficients: \n', regr.coef_)

# The root mean squared error
print("Root mean squared error: %.2f"
      % np.sqrt((regr.predict(X_test)-0.7- y_test) ** 2).mean())
